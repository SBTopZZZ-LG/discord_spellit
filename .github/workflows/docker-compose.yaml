name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_OIDC_ROLE_ARN: ${{ vars.AWS_OIDC_ROLE_ARN }}
  AWS_ECR_NAME: ${{ vars.AWS_ECR_NAME }}
  AWS_SECRET_NAME: ${{ vars.AWS_SECRET_NAME }}
  AWS_ECS_CLUSTER: ${{ vars.AWS_ECS_CLUSTER }}
  AWS_ECS_SERVICE: ${{ vars.AWS_ECS_SERVICE }}
  DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
  DISCORD_CLIENT_SECRET: ${{ secrets.DISCORD_CLIENT_SECRET }}
  MONGODB_URI: ${{ secrets.MONGODB_URI }}

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    name: Build & Push to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_OIDC_ROLE_ARN }}
          role-session-name: GitHubActions
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get ECR Repository URI
        id: get-ecr-uri
        run: |
          ECR_URI=$(aws ecr describe-repositories --region $AWS_REGION --query "repositories[?repositoryName=='${{ env.AWS_ECR_NAME }}'].repositoryUri" --output text)
          echo "ECR_URI=$ECR_URI" >> $GITHUB_ENV

      - name: Build and Tag Docker Image
        run: |
          docker build -t $ECR_URI:latest .

      - name: Push Docker Image to ECR
        run: |
          docker push $ECR_URI:latest

  update-secrets:
    name: Update AWS Secrets Manager
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_OIDC_ROLE_ARN }}
          role-session-name: GitHubActions
          aws-region: ${{ env.AWS_REGION }}

      - name: Update AWS Secrets Manager with Discord Secrets
        run: |
          aws secretsmanager update-secret --region $AWS_REGION \
            --secret-id $AWS_SECRET_NAME \
            --secret-string '{"DISCORD_BOT_TOKEN": "'${DISCORD_BOT_TOKEN}'", "DISCORD_CLIENT_SECRET": "'${DISCORD_CLIENT_SECRET}'", "MONGODB_URI": "'${MONGODB_URI}'"}'

  force-ecs-deployment:
    name: Force ECS Deployment
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_OIDC_ROLE_ARN }}
          role-session-name: GitHubActions
          aws-region: ${{ env.AWS_REGION }}

      - name: Check if ECS Cluster and Service exist
        id: check-ecs
        run: |
          # Check if the cluster exists
          if aws ecs describe-clusters --clusters $AWS_ECS_CLUSTER --query "clusters[].clusterName" --output text | grep -q "$AWS_ECS_CLUSTER"; then
            # Cluster exists, now check if the service exists
            if aws ecs list-services --cluster $AWS_ECS_CLUSTER --query "serviceArns[*]" --output text | grep -q "$AWS_ECS_SERVICE"; then
              echo "ECS cluster and service exist. Proceeding with deployment."
              echo "can_deploy=true" >> $GITHUB_OUTPUT
            else
              echo "ECS service does not exist. Skipping deployment."
              echo "can_deploy=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "ECS cluster does not exist. Skipping deployment."
            echo "can_deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Force New ECS Deployment
        if: steps.check-ecs.outputs.can_deploy == 'true'
        run: |
          aws ecs update-service --cluster $AWS_ECS_CLUSTER \
            --service $AWS_ECS_SERVICE --force-new-deployment
